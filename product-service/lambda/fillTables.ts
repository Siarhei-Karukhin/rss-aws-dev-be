import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, BatchWriteCommand } from "@aws-sdk/lib-dynamodb";

const client = new DynamoDBClient({});
const documentClient = DynamoDBDocumentClient.from(client);

const productsData = [
  {
    id: 'z',
    title: 'z',
    description: 'Generated by the script',
    price: 100,
  },
  {
    id: 'x',
    title: 'x',
    description: 'Generated by the script',
    price: 100,
  },
  {
    id: 'c',
    title: 'c',
    description: 'Generated by the script',
    price: 100,
  },
  {
    id: 'v',
    title: 'v',
    description: 'Generated by the script',
    price: 100,
  },
  {
    id: 'b',
    title: 'b',
    description: 'Generated by the script',
    price: 100,
  },
  {
    id: 'n',
    title: 'n',
    description: 'Generated by the script',
    price: 100,
  },
  {
    id: 'm',
    title: 'm',
    description: 'Generated by the script',
    price: 100,
  },
  {
    id: 'a',
    title: 'a',
    description: 'Generated by the script',
    price: 100,
  },
  {
    id: 's',
    title: 's',
    description: 'Generated by the script',
    price: 100,
  },
  {
    id: 'd',
    title: 'd',
    description: 'Generated by the script',
    price: 100,
  },
];

const stocksData = [
  {
    product_id: 'z',
    count: 3,
  },
  {
    product_id: 'x',
    count: 3,
  },
  {
    product_id: 'c',
    count: 3,
  },
  {
    product_id: 'v',
    count: 3,
  },
  {
    product_id: 'b',
    count: 3,
  },
  {
    product_id: 'n',
    count: 3,
  },
  {
    product_id: 'm',
    count: 3,
  },
  {
    product_id: 'a',
    count: 3,
  },
  {
    product_id: 's',
    count: 3,
  },
  {
    product_id: 'd',
    count: 3,
  },
];

export const handler = async (event: any) => {
  try {
    const productsTableName = process.env.PRODUCTS_TABLE;

    if (!productsTableName) {
      throw new Error('productsTableName missing');
    }
  
    const productsTableCommand = new BatchWriteCommand({
      RequestItems: {
        [productsTableName]: productsData.map((item) => ({
          PutRequest: { Item: item },
        })),
      },
    });
    const productsTableResponse = await documentClient.send(productsTableCommand);
    console.log(productsTableResponse);

    const stocksTableName = process.env.STOCKS_TABLE;

    if (!stocksTableName) {
      throw new Error('stocksTableName missing');
    }
  
    const stocksTableCommand = new BatchWriteCommand({
      RequestItems: {
        [stocksTableName]: stocksData.map((item) => ({
          PutRequest: { Item: item },
        })),
      },
    });
    const stocksTableResponse = await documentClient.send(stocksTableCommand);
    console.log(stocksTableResponse);
    
  } catch (error) {
    console.error(error);
  }
};
